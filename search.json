[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/16BHW1/index.html",
    "href": "posts/16BHW1/index.html",
    "title": "PIC 16B HW1",
    "section": "",
    "text": "import pandas as pd\n\n# advanced plotting tools for data frames\n# basically a bunch of matplotlib shortcuts\nimport seaborn as sns \n\nfrom matplotlib import pyplot as plt\nimport numpy as np"
  },
  {
    "objectID": "posts/16BHW1/index.html#section-1-database-creation",
    "href": "posts/16BHW1/index.html#section-1-database-creation",
    "title": "PIC 16B HW1",
    "section": "Section 1: Database Creation",
    "text": "Section 1: Database Creation\nWe are required to create a database with three tables: temperatures, stations, and countries. We need to know how to access country names and relate them to temperature readings. We also need to keep these as three seperate tables in our database.\nLecture Notes: “Databases provide us with a structured way to move subsets of data from storage into memory. Python has a module called sqlite3 (already installed in PIC16B-24W environment) which we can use to create, manipulate, and query databases. There’s also a very handy pandas interface, enabling us to efficiently create pandas data frames containing exactly the data that we want.”\n\nimport sqlite3\nconn = sqlite3.connect(\"temps.db\")\n\n\ndf = pd.read_csv(\"temps.csv\")\ndf_iter = pd.read_csv(\"temps.csv\", chunksize = 100000)\ndf.head()\n\n\n\n\n\n\n\n\nID\nYear\nVALUE1\nVALUE2\nVALUE3\nVALUE4\nVALUE5\nVALUE6\nVALUE7\nVALUE8\nVALUE9\nVALUE10\nVALUE11\nVALUE12\n\n\n\n\n0\nACW00011604\n1961\n-89.0\n236.0\n472.0\n773.0\n1128.0\n1599.0\n1570.0\n1481.0\n1413.0\n1174.0\n510.0\n-39.0\n\n\n1\nACW00011604\n1962\n113.0\n85.0\n-154.0\n635.0\n908.0\n1381.0\n1510.0\n1393.0\n1163.0\n994.0\n323.0\n-126.0\n\n\n2\nACW00011604\n1963\n-713.0\n-553.0\n-99.0\n541.0\n1224.0\n1627.0\n1620.0\n1596.0\n1332.0\n940.0\n566.0\n-108.0\n\n\n3\nACW00011604\n1964\n62.0\n-85.0\n55.0\n738.0\n1219.0\n1442.0\n1506.0\n1557.0\n1221.0\n788.0\n546.0\n112.0\n\n\n4\nACW00011604\n1965\n44.0\n-105.0\n38.0\n590.0\n987.0\n1500.0\n1487.0\n1477.0\n1377.0\n974.0\n31.0\n-178.0\n\n\n\n\n\n\n\n\ndf.shape\n\n(1359937, 14)\n\n\n\ndef prepare_df(df):\n    df = df.set_index(keys=[\"ID\", \"Year\"])\n    df = df.stack()\n    df = df.reset_index()\n    df = df.rename(columns = {\"level_2\"  : \"Month\" , 0 : \"Temp\"})\n    df[\"Month\"] = df[\"Month\"].str[5:].astype(int)\n    df[\"Temp\"]  = df[\"Temp\"] / 100\n    return(df)\n\n\nData Cleaning\n\ndf = prepare_df(df)\ndf.head()\n\n\n\n\n\n\n\n\nID\nYear\nMonth\nTemp\n\n\n\n\n0\nACW00011604\n1961\n1\n-0.89\n\n\n1\nACW00011604\n1961\n2\n2.36\n\n\n2\nACW00011604\n1961\n3\n4.72\n\n\n3\nACW00011604\n1961\n4\n7.73\n\n\n4\nACW00011604\n1961\n5\n11.28\n\n\n\n\n\n\n\n\n\nAdding Temperatures to Our Database\n\ndf_iter = pd.read_csv(\"temps.csv\", chunksize = 100000)\nfor i, df in enumerate(df_iter):\n    df = prepare_df(df)\n    df.to_sql(\"temperatures\", conn, if_exists = \"replace\" if i == 0 else \"append\", index = False)\n\n\n\nAdding Stations to Our Database\n\nurl = \"station-metadata.csv\"\nstations = pd.read_csv(url)\nstations.to_sql(\"stations\", conn, if_exists = \"replace\", index=False)\n\n27585\n\n\n\n\nAdding Countries to Our Database\n\nurl = \"country.csv\"\nstations = pd.read_csv(url)\nstations.to_sql(\"countries\", conn, if_exists = \"replace\", index=False)\n\n279\n\n\n\ndf = pd.read_csv(\"country.csv\")\ndf = df.rename(columns={'Name': 'Country'})\ndf.to_csv(\"country_modified.csv\", index=False)\n\n\n\nLet’s check our Databse:\n\ncursor = conn.cursor()\ncursor.execute(\"SELECT name FROM sqlite_master WHERE type='table'\")\nprint(cursor.fetchall())\n\n[('temperatures',), ('stations',), ('countries',)]\n\n\n\ncursor.execute(\"SELECT sql FROM sqlite_master WHERE type='table';\")\n\nfor result in cursor.fetchall():\n    print(result[0])\n\nCREATE TABLE \"temperatures\" (\n\"ID\" TEXT,\n  \"Year\" INTEGER,\n  \"Month\" INTEGER,\n  \"Temp\" REAL\n)\nCREATE TABLE \"stations\" (\n\"ID\" TEXT,\n  \"LATITUDE\" REAL,\n  \"LONGITUDE\" REAL,\n  \"STNELEV\" REAL,\n  \"NAME\" TEXT\n)\nCREATE TABLE \"countries\" (\n\"FIPS 10-4\" TEXT,\n  \"ISO 3166\" TEXT,\n  \"Name\" TEXT\n)"
  },
  {
    "objectID": "posts/16BHW1/index.html#section-2-write-a-query-function",
    "href": "posts/16BHW1/index.html#section-2-write-a-query-function",
    "title": "PIC 16B HW1",
    "section": "Section 2: Write a Query Function",
    "text": "Section 2: Write a Query Function\nIn this section, we need to first write a climate_database.py file with the function query_climate_database() which accepts five arguments: \n1) db_file: the file name for the database 2) country: a string giving the name of a country for which data should be returned 3) year_begin: integer giving the earliest years for which should be returne  4) year_end: integer giving the latest years for which should be returned 5) month: an integer giving the month of the year for which should be returned\nThe return value of query_climate_database() is a Pandas dataframe of temeperature readings for the specified country, in the specified date range,in the specified month of year. We are required to have these columns: NAME, LATITUDE, LONGITUDE, Country, Year, Month, Temp\n\nfrom climate_database import query_climate_database\nimport inspect\nprint(inspect.getsource(query_climate_database))\n\ndef query_climate_database(db_file, country, year_begin, year_end, month):\n    conn = sqlite3.connect(db_file)\n    \n    query = '''\n    SELECT S.NAME, S.LATITUDE, S.LONGITUDE, C.Name AS COUNTRY, \n       T.Year AS Year, T.Month AS Month, T.Temp AS Temp\n    FROM temperatures T\n    JOIN stations S ON T.ID=S.ID\n    JOIN countries C ON S.ID=SUBSTR(C.ID, 1, LENGTH(S.ID)) -- Assuming ID matching logic\n    WHERE C.Name = ? AND T.Year BETWEEN ? AND ? AND T.Month = ?\n    ''',\n    (country, year_begin, year_end, month)\n\n    df = pd.read_sql_query(query, conn)\n\n    conn.close()\n    \n\n    return df\n\n\n\n\nquery_climate_database(db_file = \"temps.db\",\n                       country = \"India\", \n                       year_begin = 1980, \n                       year_end = 2020,\n                       month = 1)\n\n\n\n\n\n\n\n\nNAME\nLATITUDE\nLONGITUDE\nName\nYear\nMonth\nTemp\n\n\n\n\n0\nBALDRICK_AWS\n-82.767\n-13.05\nAntarctica\n2008\n4\n-41.08\n\n\n1\nBALDRICK_AWS\n-82.767\n-13.05\nAntarctica\n2008\n5\n-48.40\n\n\n2\nBALDRICK_AWS\n-82.767\n-13.05\nAntarctica\n2008\n6\n-50.70\n\n\n3\nBALDRICK_AWS\n-82.767\n-13.05\nAntarctica\n2008\n7\n-49.14\n\n\n4\nBALDRICK_AWS\n-82.767\n-13.05\nAntarctica\n2008\n10\n-43.66\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n8468\nVIKTORIYA_ISLAND\n80.167\n36.75\nSvalbard\n1995\n8\n0.00\n\n\n8469\nVIKTORIYA_ISLAND\n80.167\n36.75\nSvalbard\n1995\n9\n-2.09\n\n\n8470\nVIKTORIYA_ISLAND\n80.167\n36.75\nSvalbard\n1995\n10\n-8.70\n\n\n8471\nVIKTORIYA_ISLAND\n80.167\n36.75\nSvalbard\n1995\n11\n-20.90\n\n\n8472\nVIKTORIYA_ISLAND\n80.167\n36.75\nSvalbard\n1995\n12\n-25.40\n\n\n\n\n8473 rows × 7 columns\n\n\n\n\nANOTHER APPROACH\n\nimport sqlite3\nimport pandas as pd\n\ndb_file = 'temps.db'\n\n\nconn = sqlite3.connect(db_file)\ncursor = conn.cursor()\n\ncursor.execute('''\nCREATE TABLE IF NOT EXISTS countries (\n    country_id INTEGER PRIMARY KEY,\n    country_name TEXT NOT NULL\n)\n''')\n\ncursor.execute('''\nCREATE TABLE IF NOT EXISTS stations (\n    station_id INTEGER PRIMARY KEY,\n    station_name TEXT NOT NULL,\n    latitude REAL,\n    longitude REAL,\n    country_id INTEGER,\n    FOREIGN KEY (country_id) REFERENCES countries (country_id)\n)\n''')\n\ncursor.execute('''\nCREATE TABLE IF NOT EXISTS temperatures (\n    temperature_id INTEGER PRIMARY KEY,\n    station_id INTEGER,\n    country_id INTEGER,\n    year INTEGER,\n    month INTEGER,\n    temp REAL,\n    FOREIGN KEY (station_id) REFERENCES stations (station_id),\n    FOREIGN KEY (country_id) REFERENCES countries (country_id)\n)\n''')\n\n\nconn.commit()\n\n\ndef load_csv_to_table(csv_file, table_name, conn):\n    df = pd.read_csv(csv_file)\n    df.to_sql(table_name, conn, if_exists='replace', index=False)\n\n\nload_csv_to_table('country.csv', 'countries', conn)\nload_csv_to_table('station-metadata.csv', 'stations', conn)\nload_csv_to_table('temps.csv', 'temperatures', conn)\n\nconn.close()\n\n\ndef query_climate_database(db_file, country, year_begin, year_end, month):\n    conn = sqlite3.connect(db_file)\n    \n    temp_column = f'VALUE{month}'\n    \n    query = f'''\n    SELECT st.NAME, st.LATITUDE, st.LONGITUDE, co.Name AS Country, \n           te.Year, {month} AS Month, te.{temp_column} AS Temp\n    FROM temperatures te\n    INNER JOIN stations st ON te.ID = st.ID\n    INNER JOIN countries co ON co.`FIPS 10-4` = SUBSTR(te.ID, 1, 2)\n    WHERE co.`FIPS 10-4` = (SELECT `FIPS 10-4` FROM countries WHERE Name = \"{country}\")\n    AND te.Year BETWEEN {year_begin} AND {year_end}\n    AND te.{temp_column} IS NOT NULL\n    '''\n    \n    df = pd.read_sql_query(query, conn)\n\n    conn.close()\n    \n\n    return df\n\n\nquery_climate_database(db_file =\"temps.db\", country =\"India\", year_begin = 1980, year_end = 2020,month = 1)\n\n\n\n\n\n\n\n\nNAME\nLATITUDE\nLONGITUDE\nCountry\nYear\nMonth\nTemp\n\n\n\n\n0\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1980\n1\n2348.0\n\n\n1\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1981\n1\n2457.0\n\n\n2\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1982\n1\n2419.0\n\n\n3\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1983\n1\n2351.0\n\n\n4\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1984\n1\n2481.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3147\nDARJEELING\n27.050\n88.270\nIndia\n1983\n1\n510.0\n\n\n3148\nDARJEELING\n27.050\n88.270\nIndia\n1986\n1\n690.0\n\n\n3149\nDARJEELING\n27.050\n88.270\nIndia\n1994\n1\n810.0\n\n\n3150\nDARJEELING\n27.050\n88.270\nIndia\n1995\n1\n560.0\n\n\n3151\nDARJEELING\n27.050\n88.270\nIndia\n1997\n1\n570.0\n\n\n\n\n3152 rows × 7 columns\n\n\n\nWhich works well."
  },
  {
    "objectID": "posts/16BHW1/index.html#section-3-write-a-geographic-scatter-function-for-yearly-temperature-increases",
    "href": "posts/16BHW1/index.html#section-3-write-a-geographic-scatter-function-for-yearly-temperature-increases",
    "title": "PIC 16B HW1",
    "section": "Section 3: Write A Geographic Scatter Function for Yearly Temperature Increases",
    "text": "Section 3: Write A Geographic Scatter Function for Yearly Temperature Increases\nConsider this question: How does the average yearly change in temperature vary within a given country?\nIn this section, we are going to write a function called temperature_coefficient_plot() to generate an interactive geographic scatterplot, constructing using Plotly Express with a point for each station.\n\nNote: Apply () method can be used\n\n\ndf_countries = pd.read_csv('country.csv')\nprint(df_countries.columns.tolist())\ndf_countries\n\n['FIPS 10-4', 'ISO 3166', 'Name']\n\n\n\n\n\n\n\n\n\nFIPS 10-4\nISO 3166\nName\n\n\n\n\n0\nAF\nAF\nAfghanistan\n\n\n1\nAX\n-\nAkrotiri\n\n\n2\nAL\nAL\nAlbania\n\n\n3\nAG\nDZ\nAlgeria\n\n\n4\nAQ\nAS\nAmerican Samoa\n\n\n...\n...\n...\n...\n\n\n274\n-\n-\nWorld\n\n\n275\nYM\nYE\nYemen\n\n\n276\n-\n-\nZaire\n\n\n277\nZA\nZM\nZambia\n\n\n278\nZI\nZW\nZimbabwe\n\n\n\n\n279 rows × 3 columns\n\n\n\n\ndf_temps = pd.read_csv('temps.csv')\nprint(df_temps.columns.tolist())\ndf_temps.head()\n\n['ID', 'Year', 'VALUE1', 'VALUE2', 'VALUE3', 'VALUE4', 'VALUE5', 'VALUE6', 'VALUE7', 'VALUE8', 'VALUE9', 'VALUE10', 'VALUE11', 'VALUE12']\n\n\n\n\n\n\n\n\n\nID\nYear\nVALUE1\nVALUE2\nVALUE3\nVALUE4\nVALUE5\nVALUE6\nVALUE7\nVALUE8\nVALUE9\nVALUE10\nVALUE11\nVALUE12\n\n\n\n\n0\nACW00011604\n1961\n-89.0\n236.0\n472.0\n773.0\n1128.0\n1599.0\n1570.0\n1481.0\n1413.0\n1174.0\n510.0\n-39.0\n\n\n1\nACW00011604\n1962\n113.0\n85.0\n-154.0\n635.0\n908.0\n1381.0\n1510.0\n1393.0\n1163.0\n994.0\n323.0\n-126.0\n\n\n2\nACW00011604\n1963\n-713.0\n-553.0\n-99.0\n541.0\n1224.0\n1627.0\n1620.0\n1596.0\n1332.0\n940.0\n566.0\n-108.0\n\n\n3\nACW00011604\n1964\n62.0\n-85.0\n55.0\n738.0\n1219.0\n1442.0\n1506.0\n1557.0\n1221.0\n788.0\n546.0\n112.0\n\n\n4\nACW00011604\n1965\n44.0\n-105.0\n38.0\n590.0\n987.0\n1500.0\n1487.0\n1477.0\n1377.0\n974.0\n31.0\n-178.0\n\n\n\n\n\n\n\n\ndf_stationmetadata = pd.read_csv('station-metadata.csv')\nprint(df_stationmetadata.columns.tolist())\ndf_stationmetadata\n\n['ID', 'LATITUDE', 'LONGITUDE', 'STNELEV', 'NAME']\n\n\n\n\n\n\n\n\n\nID\nLATITUDE\nLONGITUDE\nSTNELEV\nNAME\n\n\n\n\n0\nACW00011604\n57.7667\n11.8667\n18.0\nSAVE\n\n\n1\nAE000041196\n25.3330\n55.5170\n34.0\nSHARJAH_INTER_AIRP\n\n\n2\nAEM00041184\n25.6170\n55.9330\n31.0\nRAS_AL_KHAIMAH_INTE\n\n\n3\nAEM00041194\n25.2550\n55.3640\n10.4\nDUBAI_INTL\n\n\n4\nAEM00041216\n24.4300\n54.4700\n3.0\nABU_DHABI_BATEEN_AIR\n\n\n...\n...\n...\n...\n...\n...\n\n\n27580\nZI000067983\n-20.2000\n32.6160\n1132.0\nCHIPINGE\n\n\n27581\nZI000067991\n-22.2170\n30.0000\n457.0\nBEITBRIDGE\n\n\n27582\nZIXLT371333\n-17.8300\n31.0200\n1471.0\nHARARE_BELVEDERE\n\n\n27583\nZIXLT443557\n-18.9800\n32.4500\n1018.0\nGRAND_REEF\n\n\n27584\nZIXLT622116\n-19.4300\n29.7500\n1411.0\nGWELO\n\n\n\n\n27585 rows × 5 columns\n\n\n\n\nimport pandas as pd\nimport sqlite3\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\ndef temperature_coefficient_plot(db_file, country, year_begin, year_end, month, min_obs, **kwargs):\n    conn = sqlite3.connect(db_file)\n    \n    country_code_query = f\"SELECT `FIPS 10-4` FROM countries WHERE Name = '{country}'\"\n    country_code = pd.read_sql_query(country_code_query, conn).iloc[0, 0]\n    \n\n    temp_column = f'VALUE{month}'\n    \n\n    query = f'''\n    SELECT st.NAME, st.LATITUDE, st.LONGITUDE, '{country}' AS Country, \n           te.Year, {month} AS Month, te.{temp_column} AS Temp\n    FROM temperatures te\n    INNER JOIN stations st ON te.ID = st.ID\n    WHERE SUBSTR(te.ID, 1, 2) = '{country_code}'\n    AND te.Year BETWEEN {year_begin} AND {year_end}\n    AND te.{temp_column} IS NOT NULL\n    '''\n\n    df = pd.read_sql_query(query, conn)\n\n    conn.close()\n    \n\n    df = df.groupby('NAME').filter(lambda x: len(x) &gt;= min_obs)\n    \n\n    def calculate_slope(df):\n        if len(df) &lt; min_obs:\n            return np.nan  \n        X = df['Year'].values.reshape(-1, 1)\n        y = df['Temp'].values\n        reg = LinearRegression().fit(X, y)\n        return reg.coef_[0]\n    \n    df['Slope'] = df.groupby('NAME').apply(calculate_slope)\n    \n    df = df.dropna(subset=['Slope'])\n    \n\n    df = df.drop_duplicates(subset=['NAME'])\n    \n\n    fig = px.scatter_mapbox(df, lat=\"LATITUDE\", lon=\"LONGITUDE\", \n                            color=\"Slope\",\n                            size=np.abs(df['Slope']), \n                            **kwargs)\n    \n\n    if 'color_continuous_scale' not in kwargs:\n        fig.update_traces(marker=dict(colorscale='RdYlGn'))\n    \n    fig.update_layout(mapbox_style=\"carto-positron\", mapbox_zoom=2)\n    fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n    \n    return fig\n\ncolor_map = px.colors.diverging.RdGy_r\n\n\nfig = temperature_coefficient_plot(\n    db_file=\"climate_data.db\", \n    country=\"India\", \n    year_begin=1980, \n    year_end=2020, \n    month=1, \n    min_obs=10,\n    zoom=3,\n    mapbox_style=\"carto-positron\",\n    color_continuous_scale=color_map)\n\n\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "posts/16BHW1/index.html#section-4-create-two-more-interesting-figures",
    "href": "posts/16BHW1/index.html#section-4-create-two-more-interesting-figures",
    "title": "PIC 16B HW1",
    "section": "Section 4: Create Two More Interesting Figures",
    "text": "Section 4: Create Two More Interesting Figures\n\nimport plotly\nplotly.__version__\n\n'5.18.0'\n\n\n\nFigure 1\nQuestion Address: How does the elevation above sea level vary with latitude across different geographical locations?\n\nimport pandas as pd\nfilename = \"station-metadata.csv\"\nstations = pd.read_csv(filename)\nstations= stations.dropna(subset = [\"LATITUDE\", \"STNELEV\"])\n\n\nfrom plotly import express as px\n\nfig = px.scatter(data_frame = stations,\n                 x = \"LATITUDE\",\n                 y = \"STNELEV\",\n                 width = 500,\n                 height = 300,\n                )\n\n#reduce whitespace\nfig.update_layout(margin={\"r\":0, \"t\":0, \"l\":0, \"b\":0})\n# show the plot\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\n\npic1.jpg\n\n\nBy plotting latitude against station elevation, researchers can analyze patterns such as:\nAre higher elevations found at specific latitudes? Is there a correlation between latitude and elevation, and is it positive or negative? How does the distribution of elevations vary across different latitudes? Are there any outliers that suggest unique geographical features?\n\n\nFigure 2\nQuestion Address: How do temperature values for January 1961 vary across different IDs (which could represent different locations or stations) in the dataset provided?\n\nimport pandas as pd\nimport plotly.express as px\n\ndef plot_temperature_boxplot_january_1961(csv_filename):\n    df = pd.read_csv(csv_filename)\n    \n    df_january_1961 = df[df['Year'] == 1961][['ID', 'VALUE1']]\n    \n    # Rename 'VALUE1' to 'Temperature' for clarity\n    df_january_1961.rename(columns={'VALUE1': 'Temperature'}, inplace=True)\n    \n    # Create the boxplot\n    fig = px.box(data_frame=df_january_1961,\n                 x=\"ID\",\n                 y=\"Temperature\",\n                 width=500,\n                 height=300)\n\n    # Reduce whitespace\n    fig.update_layout(margin={\"r\":0, \"t\":50, \"l\":0, \"b\":0})\n    \n    # Show the plot\n    fig.show()\nplot_temperature_boxplot_january_1961('temps.csv')\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\n\n\npic2.jpg\n\n\nBy constructing a boxplot of January temperatures across different locations, researchers can investigate patterns such as:\nWhat is the typical range of temperatures experienced in various locations during January? Are there any locations with particularly high or low median temperatures compared to others? How does the interquartile range (IQR) of temperatures compare among different locations? Are there any anomalies indicating extreme weather events or microclimates in specific locations?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PIC16B",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nFeb 5, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nPIC 16B HW1\n\n\n\n\n\n\nweek 4\n\n\nhw1\n\n\n\n\n\n\n\n\n\nFeb 5, 2024\n\n\nManshu Huang\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nFeb 2, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  }
]