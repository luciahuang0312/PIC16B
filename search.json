[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/16BHW2/index.html",
    "href": "posts/16BHW2/index.html",
    "title": "PIC 16B HW2",
    "section": "",
    "text": "In today’s tutorial, we are going to learn how to use webscraping to build a “recommender system”, answering the following questions:  What movie or TV shows share a actor with your favorite movie or show? We assume that if Movie Y has many of the same actors as your favorite Movie X, you might also enjoy Y. To see how we develop a webscraper, please scroll down to section 2.\n\n\n\n\n\nWe need to first choose one favorite movie on TMDB page, here I choose “Harry Potter and the Philosopher’s Stone”, with url: https://www.themoviedb.org/movie/671-harry-potter-and-the-philosopher-s-stone/\n\n\n\nLet’s “reherse” what our scraper will do; follong these steps: First, we click on the Full Cast & Crew link, which leads us to the page origianl-url/cast (https://www.themoviedb.org/movie/671-harry-potter-and-the-philosopher-s-stone/cast) in this case. Second, we click on the portrait of one of the actors, which leads us to a different url, introducing the actor’s acting credit, like this: https://www.themoviedb.org/person/10980-daniel-radcliffe  Finally, we stay in this page, and scroll down to examine the actor’s Acting section, seeing the titles of a few movies and TV shows in this section. Remember our scraper is going to replicate the exact same process: “Staring with your favorite movie, it’s going to look at all the actors in that movie, and then log all the other movies of TV shows they worked on” **Note that it would be agood idea to use the Developer Tools to inspect individual HTML elements and look for patterns among the names you are looking for.\n\n\n\nconda activate PIC16B-24W\nscrapy startproject TMDB_scraper\ncd TMDB_scraper\nUse this code to initialize the project\n\n\n\nAdd the folloing line to the file settings.py to prevent scraper from downloading too much data while you’re still testing.\nCLOSESPIDER_PAGECOUNT = 20\nPS: you will remove this line later! PPS: If you run into 403 Forbidden errors latter, you need to change user agent line in setting.py, one way to change user agent on scrapy shell is\nscrapy shell -s USER_AGENT='Scrapy/2.8.0 (+https://scrapy.org)' https://www.themoviedb.org/...\n\n\n\n\nIn this section, we create a file tmdb_spider.py inside the spiders directory called tmdb_spider.py. Note we will write scraper codes in this file.\n\n# to run \n# scrapy crawl tmdb_spider -o movies.csv -a subdir=671-harry-potter-and-the-philosopher-s-stone\n\nimport scrapy\n\nclass TmdbSpider(scrapy.Spider):\n    # Give a unique identifier for spider name, used to trigger this certain spider from the command line\n    name = 'tmdb_spider'\n    \n    def __init__(self, subdir=None, *args, **kwargs):\n        \"\"\"\n        Initialize the spider instance with a specific movie's subdirectory.\n        This subdirectory is essential for crafting the starting URL from which the spider begins scraping.\n        \n        :param subdir: Subdirectory for the movie on TMDB site, used to build the start URL\n        :param args: Positional arguments\n        :param kwargs: Keyword arguments\n        \"\"\"\n        super(TmdbSpider, self).__init__(*args, **kwargs)\n        # Set the starting URL to scrape based on the provided movie subdirectory.\n        self.start_urls = [f\"https://www.themoviedb.org/movie/{subdir}/\"]\n\n    def parse(self, response):\n        \"\"\"\n        Parses the main movie page, extracts the from the full cast, and makes a request to that link\n        :param response: The response object containing the content of the movies' main page\n        \"\"\"\n        # Extracts the link to the \"full cast and crew\" page from the main movie page\n        full_cast_link = response.css('p.new_button a::attr(href)').get()\n        if full_cast_link:\n            # If the link is found, make a request to the cast list page\n            yield response.follow(full_cast_link, self.parse_full_credits)\n    \n    def parse_full_credits(self, response):\n        \"\"\"\n        Parses the \"Full Cast & Crew\" page, extracts each individual actor's personal page links, and makes requests to those pages.\n        :param response: contains the content of the \"Full Cast & Crew\" page.\n        \"\"\"\n        # Selects only the first \"panel pad\" section of the page using CSS selectors\n        first_panel_pad = response.xpath('(//section[contains(@class, \"panel\") and contains(@class, \"pad\")])[1]')\n        for actor in first_panel_pad.css('ol.people.credits &gt; li'):\n            # Extracts the individual actor page link，not including crew members\n            actor_page = actor.css('a::attr(href)').get()\n            if actor_page:\n                # Makes a request to the actor's personal page, directing go to its acting role section\n                yield response.follow(actor_page + '?credit_department=Acting', self.parse_actor_page)\n                \n    def parse_actor_page(self, response):\n        \"\"\"\n        Parses the actor's personal page, extracting information about the movies or TV shows the actor has participated in.\n        :param response: The response object containing the content of the actor's personal page. \n        We want only the works listed in \"Acting\" section for the actor page.\n        We need to determine both the name of actor and the name of each movie/show.\n        \"\"\"\n        # Extracts the actor's name\n        actor_name = response.css('h2.title a::text').get()\n        # Directly gets all texts of this structure by using xpath a[@class='tooltip']/bdi\n        movies = response.xpath('//a[@class=\"tooltip\"]/bdi/text()').getall()\n        # Extracts the title of the work\n        for title in movies:\n            # Yields a dictionary (two key-value pairs) containing the actor's name and the title of the work\n            yield {\n                'actor': actor_name,\n                'movie_or_TV_name': title\n            }\n\nAfter successfully build the spider, we can run this command in terminal: \nscrapy crawl tmdb_spider -o results.csv -a subdir=671-harry-potter-and-the-philosopher-s-stone \nWhich run the spider and save a results.csv file with columns for actor names and the movies and TV shows on which they featured in.\nOnce the spider is fully written, we can comment out the line  CLOSESPIDER_PAGECOUNT = 20  in the settings.py file, then run this command in the terminal to generate a results.csv  scrapy crawl tmdb_spider -o results.csv -a subdir=671-harry-potter-and-the-philosopher-s-stone\nThis results.csv will contain columns for actor names and the movies and TV shows on which they featured in.\n\n\n\nIn this section, I will introduce visualization of numbers of shared actors.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n\n\ndata=pd.read_csv('results.csv')\nprint(data)\n\n                 actor                    movie_or_TV_name\n0     Daniel Radcliffe  Have I Got a Bit More News for You\n1     Daniel Radcliffe     David Holmes: The Boy Who Lived\n2     Daniel Radcliffe           100 Years of Warner Bros.\n3     Daniel Radcliffe                            Mulligan\n4     Daniel Radcliffe                             Digman!\n...                ...                                 ...\n2956      Rupert Grint                            The View\n2957      Rupert Grint                                GMTV\n2958      Rupert Grint      The Tonight Show with Jay Leno\n2959      Rupert Grint                 An Audience with...\n2960      Rupert Grint                               Today\n\n[2961 rows x 2 columns]\n\n\n\nprint(data.head(35))\n\n               actor                                   movie_or_TV_name\n0   Daniel Radcliffe                 Have I Got a Bit More News for You\n1   Daniel Radcliffe                    David Holmes: The Boy Who Lived\n2   Daniel Radcliffe                          100 Years of Warner Bros.\n3   Daniel Radcliffe                                           Mulligan\n4   Daniel Radcliffe                                            Digman!\n5   Daniel Radcliffe                                     Extrapolations\n6   Daniel Radcliffe                       Weird: The Al Yankovic Story\n7   Daniel Radcliffe                                      The Lost City\n8   Daniel Radcliffe  Harry Potter 20th Anniversary: Return to Hogwarts\n9   Daniel Radcliffe                         (K)nox: The Rob Knox Story\n10  Daniel Radcliffe  Unbreakable Kimmy Schmidt: Kimmy vs. the Music...\n11  Daniel Radcliffe  Unbreakable Kimmy Schmidt: Kimmy vs. the Reverend\n12  Daniel Radcliffe                     Endgame & Rough for Theatre II\n13  Daniel Radcliffe                               Escape from Pretoria\n14  Daniel Radcliffe                                        Guns Akimbo\n15  Daniel Radcliffe                            The Kelly Clarkson Show\n16  Daniel Radcliffe                               Playmobil: The Movie\n17  Daniel Radcliffe                                    Miracle Workers\n18  Daniel Radcliffe                                    Beast of Burden\n19  Daniel Radcliffe                                      2 Dope Queens\n20  Daniel Radcliffe  The Robot Chicken Walking Dead Special: Die wa...\n21  Daniel Radcliffe                                             Jungle\n22  Daniel Radcliffe  National Theatre Live: Rosencrantz & Guildenst...\n23  Daniel Radcliffe                                     Lost in London\n24  Daniel Radcliffe                                           Imperium\n25  Daniel Radcliffe                                     Swiss Army Man\n26  Daniel Radcliffe                                   Now You See Me 2\n27  Daniel Radcliffe                                Victor Frankenstein\n28  Daniel Radcliffe                                   The Gamechangers\n29  Daniel Radcliffe                 The Late Show with Stephen Colbert\n30  Daniel Radcliffe                                         Trainwreck\n31  Daniel Radcliffe                     Tom Felton Meets the Superfans\n32  Daniel Radcliffe                                           Hot Ones\n33  Daniel Radcliffe                                    BoJack Horseman\n34  Daniel Radcliffe                                 Trailblazer Honors\n\n\n\n\"\"\"\nCounts the occurrences of each unique value in the 'actor' column of the dataframe 'data' and returns a Series.\nThe index of the Series will be the actor names, and the values will be the count of movies each actor has appeared in.\n\"\"\"\nactor_counts = data['actor'].value_counts()\n\n\n\n\n\nactor_counts\n\nactor\nJohn Cleese          241\nJohn Hurt            233\nJulie Walters        152\nRobbie Coltrane      150\nLeslie Phillips      134\n                    ... \nBen Borowiecki         2\nEmily Dale             2\nWill Theakston         2\nLeilah Sutherland      1\nSaunders Triplets      1\nName: count, Length: 63, dtype: int64\n\n\n\n\"\"\"\nThis script visualizes the number of movies each actor has appeared in using a bar plot.\n\"\"\"\n\n# Creates a new figure with a specified size.\nplt.figure(figsize=(12,6))\n\n# Creates a bar plot using seaborn. The x-axis represents actors, and the y-axis represents the count of movies.\n# `actor_counts` is assumed to be a pandas Series where the index contains actor names and values represent movie counts.\nsns.barplot(x=actor_counts.index, y=actor_counts.values)\n\n# Rotates the x-axis labels (actor names) by 90 degrees to prevent overlap and improve readability.\nplt.xticks(rotation=90)\n\n# Sets the label for the x-axis as 'Actor'.\nplt.xlabel('Actor')\n\n# Sets the label for the y-axis as 'Movie Count'.\nplt.ylabel('Movie Count')\n\n# Sets the title of the plot as 'Number of Movies for Each Actor'.\nplt.title('Number of Movies for Each Actor')\n\n# Adjusts the layout to make sure everything fits within the figure area without any clipping.\nplt.tight_layout()\n\n# Displays the plot.\nplt.show()"
  },
  {
    "objectID": "posts/16BHW2/index.html#introduction",
    "href": "posts/16BHW2/index.html#introduction",
    "title": "PIC 16B HW2",
    "section": "",
    "text": "In today’s tutorial, we are going to learn how to use webscraping to build a “recommender system”, answering the following questions:  What movie or TV shows share a actor with your favorite movie or show? We assume that if Movie Y has many of the same actors as your favorite Movie X, you might also enjoy Y. To see how we develop a webscraper, please scroll down to section 2."
  },
  {
    "objectID": "posts/16BHW2/index.html#setup",
    "href": "posts/16BHW2/index.html#setup",
    "title": "PIC 16B HW2",
    "section": "",
    "text": "We need to first choose one favorite movie on TMDB page, here I choose “Harry Potter and the Philosopher’s Stone”, with url: https://www.themoviedb.org/movie/671-harry-potter-and-the-philosopher-s-stone/\n\n\n\nLet’s “reherse” what our scraper will do; follong these steps: First, we click on the Full Cast & Crew link, which leads us to the page origianl-url/cast (https://www.themoviedb.org/movie/671-harry-potter-and-the-philosopher-s-stone/cast) in this case. Second, we click on the portrait of one of the actors, which leads us to a different url, introducing the actor’s acting credit, like this: https://www.themoviedb.org/person/10980-daniel-radcliffe  Finally, we stay in this page, and scroll down to examine the actor’s Acting section, seeing the titles of a few movies and TV shows in this section. Remember our scraper is going to replicate the exact same process: “Staring with your favorite movie, it’s going to look at all the actors in that movie, and then log all the other movies of TV shows they worked on” **Note that it would be agood idea to use the Developer Tools to inspect individual HTML elements and look for patterns among the names you are looking for.\n\n\n\nconda activate PIC16B-24W\nscrapy startproject TMDB_scraper\ncd TMDB_scraper\nUse this code to initialize the project\n\n\n\nAdd the folloing line to the file settings.py to prevent scraper from downloading too much data while you’re still testing.\nCLOSESPIDER_PAGECOUNT = 20\nPS: you will remove this line later! PPS: If you run into 403 Forbidden errors latter, you need to change user agent line in setting.py, one way to change user agent on scrapy shell is\nscrapy shell -s USER_AGENT='Scrapy/2.8.0 (+https://scrapy.org)' https://www.themoviedb.org/..."
  },
  {
    "objectID": "posts/16BHW2/index.html#write-scraper",
    "href": "posts/16BHW2/index.html#write-scraper",
    "title": "PIC 16B HW2",
    "section": "",
    "text": "In this section, we create a file tmdb_spider.py inside the spiders directory called tmdb_spider.py. Note we will write scraper codes in this file.\n\n# to run \n# scrapy crawl tmdb_spider -o movies.csv -a subdir=671-harry-potter-and-the-philosopher-s-stone\n\nimport scrapy\n\nclass TmdbSpider(scrapy.Spider):\n    # Give a unique identifier for spider name, used to trigger this certain spider from the command line\n    name = 'tmdb_spider'\n    \n    def __init__(self, subdir=None, *args, **kwargs):\n        \"\"\"\n        Initialize the spider instance with a specific movie's subdirectory.\n        This subdirectory is essential for crafting the starting URL from which the spider begins scraping.\n        \n        :param subdir: Subdirectory for the movie on TMDB site, used to build the start URL\n        :param args: Positional arguments\n        :param kwargs: Keyword arguments\n        \"\"\"\n        super(TmdbSpider, self).__init__(*args, **kwargs)\n        # Set the starting URL to scrape based on the provided movie subdirectory.\n        self.start_urls = [f\"https://www.themoviedb.org/movie/{subdir}/\"]\n\n    def parse(self, response):\n        \"\"\"\n        Parses the main movie page, extracts the from the full cast, and makes a request to that link\n        :param response: The response object containing the content of the movies' main page\n        \"\"\"\n        # Extracts the link to the \"full cast and crew\" page from the main movie page\n        full_cast_link = response.css('p.new_button a::attr(href)').get()\n        if full_cast_link:\n            # If the link is found, make a request to the cast list page\n            yield response.follow(full_cast_link, self.parse_full_credits)\n    \n    def parse_full_credits(self, response):\n        \"\"\"\n        Parses the \"Full Cast & Crew\" page, extracts each individual actor's personal page links, and makes requests to those pages.\n        :param response: contains the content of the \"Full Cast & Crew\" page.\n        \"\"\"\n        # Selects only the first \"panel pad\" section of the page using CSS selectors\n        first_panel_pad = response.xpath('(//section[contains(@class, \"panel\") and contains(@class, \"pad\")])[1]')\n        for actor in first_panel_pad.css('ol.people.credits &gt; li'):\n            # Extracts the individual actor page link，not including crew members\n            actor_page = actor.css('a::attr(href)').get()\n            if actor_page:\n                # Makes a request to the actor's personal page, directing go to its acting role section\n                yield response.follow(actor_page + '?credit_department=Acting', self.parse_actor_page)\n                \n    def parse_actor_page(self, response):\n        \"\"\"\n        Parses the actor's personal page, extracting information about the movies or TV shows the actor has participated in.\n        :param response: The response object containing the content of the actor's personal page. \n        We want only the works listed in \"Acting\" section for the actor page.\n        We need to determine both the name of actor and the name of each movie/show.\n        \"\"\"\n        # Extracts the actor's name\n        actor_name = response.css('h2.title a::text').get()\n        # Directly gets all texts of this structure by using xpath a[@class='tooltip']/bdi\n        movies = response.xpath('//a[@class=\"tooltip\"]/bdi/text()').getall()\n        # Extracts the title of the work\n        for title in movies:\n            # Yields a dictionary (two key-value pairs) containing the actor's name and the title of the work\n            yield {\n                'actor': actor_name,\n                'movie_or_TV_name': title\n            }\n\nAfter successfully build the spider, we can run this command in terminal: \nscrapy crawl tmdb_spider -o results.csv -a subdir=671-harry-potter-and-the-philosopher-s-stone \nWhich run the spider and save a results.csv file with columns for actor names and the movies and TV shows on which they featured in.\nOnce the spider is fully written, we can comment out the line  CLOSESPIDER_PAGECOUNT = 20  in the settings.py file, then run this command in the terminal to generate a results.csv  scrapy crawl tmdb_spider -o results.csv -a subdir=671-harry-potter-and-the-philosopher-s-stone\nThis results.csv will contain columns for actor names and the movies and TV shows on which they featured in."
  },
  {
    "objectID": "posts/16BHW2/index.html#make-your-recommendations-visualization",
    "href": "posts/16BHW2/index.html#make-your-recommendations-visualization",
    "title": "PIC 16B HW2",
    "section": "",
    "text": "In this section, I will introduce visualization of numbers of shared actors.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n\n\ndata=pd.read_csv('results.csv')\nprint(data)\n\n                 actor                    movie_or_TV_name\n0     Daniel Radcliffe  Have I Got a Bit More News for You\n1     Daniel Radcliffe     David Holmes: The Boy Who Lived\n2     Daniel Radcliffe           100 Years of Warner Bros.\n3     Daniel Radcliffe                            Mulligan\n4     Daniel Radcliffe                             Digman!\n...                ...                                 ...\n2956      Rupert Grint                            The View\n2957      Rupert Grint                                GMTV\n2958      Rupert Grint      The Tonight Show with Jay Leno\n2959      Rupert Grint                 An Audience with...\n2960      Rupert Grint                               Today\n\n[2961 rows x 2 columns]\n\n\n\nprint(data.head(35))\n\n               actor                                   movie_or_TV_name\n0   Daniel Radcliffe                 Have I Got a Bit More News for You\n1   Daniel Radcliffe                    David Holmes: The Boy Who Lived\n2   Daniel Radcliffe                          100 Years of Warner Bros.\n3   Daniel Radcliffe                                           Mulligan\n4   Daniel Radcliffe                                            Digman!\n5   Daniel Radcliffe                                     Extrapolations\n6   Daniel Radcliffe                       Weird: The Al Yankovic Story\n7   Daniel Radcliffe                                      The Lost City\n8   Daniel Radcliffe  Harry Potter 20th Anniversary: Return to Hogwarts\n9   Daniel Radcliffe                         (K)nox: The Rob Knox Story\n10  Daniel Radcliffe  Unbreakable Kimmy Schmidt: Kimmy vs. the Music...\n11  Daniel Radcliffe  Unbreakable Kimmy Schmidt: Kimmy vs. the Reverend\n12  Daniel Radcliffe                     Endgame & Rough for Theatre II\n13  Daniel Radcliffe                               Escape from Pretoria\n14  Daniel Radcliffe                                        Guns Akimbo\n15  Daniel Radcliffe                            The Kelly Clarkson Show\n16  Daniel Radcliffe                               Playmobil: The Movie\n17  Daniel Radcliffe                                    Miracle Workers\n18  Daniel Radcliffe                                    Beast of Burden\n19  Daniel Radcliffe                                      2 Dope Queens\n20  Daniel Radcliffe  The Robot Chicken Walking Dead Special: Die wa...\n21  Daniel Radcliffe                                             Jungle\n22  Daniel Radcliffe  National Theatre Live: Rosencrantz & Guildenst...\n23  Daniel Radcliffe                                     Lost in London\n24  Daniel Radcliffe                                           Imperium\n25  Daniel Radcliffe                                     Swiss Army Man\n26  Daniel Radcliffe                                   Now You See Me 2\n27  Daniel Radcliffe                                Victor Frankenstein\n28  Daniel Radcliffe                                   The Gamechangers\n29  Daniel Radcliffe                 The Late Show with Stephen Colbert\n30  Daniel Radcliffe                                         Trainwreck\n31  Daniel Radcliffe                     Tom Felton Meets the Superfans\n32  Daniel Radcliffe                                           Hot Ones\n33  Daniel Radcliffe                                    BoJack Horseman\n34  Daniel Radcliffe                                 Trailblazer Honors\n\n\n\n\"\"\"\nCounts the occurrences of each unique value in the 'actor' column of the dataframe 'data' and returns a Series.\nThe index of the Series will be the actor names, and the values will be the count of movies each actor has appeared in.\n\"\"\"\nactor_counts = data['actor'].value_counts()\n\n\n\n\n\nactor_counts\n\nactor\nJohn Cleese          241\nJohn Hurt            233\nJulie Walters        152\nRobbie Coltrane      150\nLeslie Phillips      134\n                    ... \nBen Borowiecki         2\nEmily Dale             2\nWill Theakston         2\nLeilah Sutherland      1\nSaunders Triplets      1\nName: count, Length: 63, dtype: int64\n\n\n\n\"\"\"\nThis script visualizes the number of movies each actor has appeared in using a bar plot.\n\"\"\"\n\n# Creates a new figure with a specified size.\nplt.figure(figsize=(12,6))\n\n# Creates a bar plot using seaborn. The x-axis represents actors, and the y-axis represents the count of movies.\n# `actor_counts` is assumed to be a pandas Series where the index contains actor names and values represent movie counts.\nsns.barplot(x=actor_counts.index, y=actor_counts.values)\n\n# Rotates the x-axis labels (actor names) by 90 degrees to prevent overlap and improve readability.\nplt.xticks(rotation=90)\n\n# Sets the label for the x-axis as 'Actor'.\nplt.xlabel('Actor')\n\n# Sets the label for the y-axis as 'Movie Count'.\nplt.ylabel('Movie Count')\n\n# Sets the title of the plot as 'Number of Movies for Each Actor'.\nplt.title('Number of Movies for Each Actor')\n\n# Adjusts the layout to make sure everything fits within the figure area without any clipping.\nplt.tight_layout()\n\n# Displays the plot.\nplt.show()"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PIC16B",
    "section": "",
    "text": "PIC 16B HW2\n\n\n\n\n\n\nweek 5\n\n\nhw2\n\n\n\n\n\n\n\n\n\nFeb 12, 2024\n\n\nManshu Huang\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nFeb 5, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nFeb 2, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  }
]